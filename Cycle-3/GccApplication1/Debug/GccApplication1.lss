
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069a  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000596  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000388  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <exp5>:
}


int exp5(){
    unsigned char z;
	DDRB=0;
  7c:	17 ba       	out	0x17, r1	; 23
	DDRD=0xff;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	81 bb       	out	0x11, r24	; 17
		printf("%c", z);
		switch(z){
			case 0: 
				PORTD = '0'; break;
			case 1:
				PORTD = '1'; break;
  82:	0f 2e       	mov	r0, r31
  84:	f1 e3       	ldi	r31, 0x31	; 49
  86:	ff 2e       	mov	r15, r31
  88:	f0 2d       	mov	r31, r0
		z &= 0b00000011;
		
		printf("%c", z);
		switch(z){
			case 0: 
				PORTD = '0'; break;
  8a:	00 e3       	ldi	r16, 0x30	; 48
			case 1:
				PORTD = '1'; break;
			case 2:
				PORTD = '2'; break;
  8c:	12 e3       	ldi	r17, 0x32	; 50
			case 3:
				PORTD = '3'; break;
  8e:	d3 e3       	ldi	r29, 0x33	; 51
int exp5(){
    unsigned char z;
	DDRB=0;
	DDRD=0xff;
	while(1){
		z=PINB;
  90:	c6 b3       	in	r28, 0x16	; 22
		z &= 0b00000011;
  92:	c3 70       	andi	r28, 0x03	; 3
		
		printf("%c", z);
  94:	8c 2f       	mov	r24, r28
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 60 00 	call	0xc0	; 0xc0 <putchar>
		switch(z){
  9c:	c1 30       	cpi	r28, 0x01	; 1
  9e:	41 f0       	breq	.+16     	; 0xb0 <exp5+0x34>
  a0:	28 f0       	brcs	.+10     	; 0xac <exp5+0x30>
  a2:	c2 30       	cpi	r28, 0x02	; 2
  a4:	39 f0       	breq	.+14     	; 0xb4 <exp5+0x38>
  a6:	c3 30       	cpi	r28, 0x03	; 3
  a8:	39 f0       	breq	.+14     	; 0xb8 <exp5+0x3c>
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <exp5+0x14>
			case 0: 
				PORTD = '0'; break;
  ac:	02 bb       	out	0x12, r16	; 18
  ae:	f0 cf       	rjmp	.-32     	; 0x90 <exp5+0x14>
			case 1:
				PORTD = '1'; break;
  b0:	f2 ba       	out	0x12, r15	; 18
  b2:	ee cf       	rjmp	.-36     	; 0x90 <exp5+0x14>
			case 2:
				PORTD = '2'; break;
  b4:	12 bb       	out	0x12, r17	; 18
  b6:	ec cf       	rjmp	.-40     	; 0x90 <exp5+0x14>
			case 3:
				PORTD = '3'; break;
  b8:	d2 bb       	out	0x12, r29	; 18
  ba:	ea cf       	rjmp	.-44     	; 0x90 <exp5+0x14>

000000bc <main>:
		}}
		return 0;
}

int main(){
	exp5();
  bc:	0e 94 3e 00 	call	0x7c	; 0x7c <exp5>

000000c0 <putchar>:
  c0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  c4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  c8:	0e 94 67 00 	call	0xce	; 0xce <fputc>
  cc:	08 95       	ret

000000ce <fputc>:
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	fb 01       	movw	r30, r22
  d8:	23 81       	ldd	r18, Z+3	; 0x03
  da:	21 fd       	sbrc	r18, 1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <fputc+0x16>
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	2c c0       	rjmp	.+88     	; 0x13c <fputc+0x6e>
  e4:	22 ff       	sbrs	r18, 2
  e6:	16 c0       	rjmp	.+44     	; 0x114 <fputc+0x46>
  e8:	46 81       	ldd	r20, Z+6	; 0x06
  ea:	57 81       	ldd	r21, Z+7	; 0x07
  ec:	24 81       	ldd	r18, Z+4	; 0x04
  ee:	35 81       	ldd	r19, Z+5	; 0x05
  f0:	42 17       	cp	r20, r18
  f2:	53 07       	cpc	r21, r19
  f4:	44 f4       	brge	.+16     	; 0x106 <fputc+0x38>
  f6:	a0 81       	ld	r26, Z
  f8:	b1 81       	ldd	r27, Z+1	; 0x01
  fa:	9d 01       	movw	r18, r26
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	31 83       	std	Z+1, r19	; 0x01
 102:	20 83       	st	Z, r18
 104:	8c 93       	st	X, r24
 106:	26 81       	ldd	r18, Z+6	; 0x06
 108:	37 81       	ldd	r19, Z+7	; 0x07
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	37 83       	std	Z+7, r19	; 0x07
 110:	26 83       	std	Z+6, r18	; 0x06
 112:	14 c0       	rjmp	.+40     	; 0x13c <fputc+0x6e>
 114:	8b 01       	movw	r16, r22
 116:	ec 01       	movw	r28, r24
 118:	fb 01       	movw	r30, r22
 11a:	00 84       	ldd	r0, Z+8	; 0x08
 11c:	f1 85       	ldd	r31, Z+9	; 0x09
 11e:	e0 2d       	mov	r30, r0
 120:	09 95       	icall
 122:	89 2b       	or	r24, r25
 124:	e1 f6       	brne	.-72     	; 0xde <fputc+0x10>
 126:	d8 01       	movw	r26, r16
 128:	16 96       	adiw	r26, 0x06	; 6
 12a:	8d 91       	ld	r24, X+
 12c:	9c 91       	ld	r25, X
 12e:	17 97       	sbiw	r26, 0x07	; 7
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	17 96       	adiw	r26, 0x07	; 7
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
 138:	16 97       	sbiw	r26, 0x06	; 6
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
